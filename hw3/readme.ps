%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU enscript 1.6.4
%%CreationDate: Mon Feb 10 16:37:49 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 4
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (readme) def
/fdir () def
/ftail (readme) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (02/10/14) def
/modtimestr (16:37:32) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B  Homework 3) s
5 508 M
(                    Due noon Wednesday, February 12, 2014) s
5 492 M
(This homework assignment is designed to give you practice working with arrays,) s
5 484 M
(linked lists, and nested loops.  It will also give you practice for the similar) s
5 476 M
(but harder run-length encoding computations in Project 1.  This is an) s
5 468 M
(individual assignment; you may not share code with other students.) s
5 452 M
(Copy the Homework 3 directory by doing the following, starting from your home) s
5 444 M
(directory:) s
5 428 M
(    cp -r ~cs61b/hw/hw3 .) s
5 420 M
(    cd hw3) s
5 404 M
(Your task is to write two methods for removing successive duplicate items from) s
5 396 M
(lists, and one method for adding them.  The smoosh\(\) method operates on lists) s
5 388 M
(represented as arrays, and the squish\(\) method and twin\(\) method operate on) s
5 380 M
(singly-linked lists.) s
5 364 M
(The Homework3 class includes test code for all three methods, as well as a) s
5 356 M
(skeleton for the smoosh\(\) method.  The SList class from Lab 3 is also present,) s
5 348 M
(and here includes skeletons for the squish\(\) method and the twin\(\) method.) s
5 332 M
(You can test all three methods by compiling and running Homework3.java.  As) s
5 324 M
(usual, you are welcome to add test cases to the main\(\) method or change main\(\)) s
5 316 M
(as you please; we will not test main\(\).  However, you cannot change the) s
5 308 M
(interface of the public methods and classes, because our autograder will use) s
5 300 M
(them.  So you might want to keep a copy of the original main\(\) test code) s
5 292 M
(around--if you accidentally change a prototype, the test code will catch it.) s
5 276 M
(You may NOT use Java's built-in data structure libraries, like java.util.Vector) s
5 268 M
(or java.util.LinkedList, in this homework \(or any future homework, except where) s
5 260 M
(otherwise specified\).  All data structure implementations should be your own or) s
5 252 M
(those taken from lectures/labs/homeworks.) s
5 236 M
(Part I  \(5 points\)) s
5 228 M
(------------------) s
5 220 M
(Fill in the smoosh\(\) method in the Homework3 class so that it performs as) s
5 212 M
(indicated in the comment.  Your solution should not use linked lists, nor) s
5 204 M
(should it use your squish\(\) method.) s
5 188 M
(  /**) s
5 180 M
(   *  smoosh\(\) takes an array of ints.  On completion the array contains) s
5 172 M
(   *  the same numbers, but wherever the array had two or more consecutive) s
5 164 M
(   *  duplicate numbers, they are replaced by one copy of the number.  Hence,) s
5 156 M
(   *  after smoosh\(\) is done, no two consecutive numbers in the array are the) s
5 148 M
(   *  same.) s
5 140 M
(   *) s
5 132 M
(   *  Any unused elements at the end of the array are set to -1.) s
5 124 M
(   *) s
5 116 M
(   *  For example, if the input array is [ 0 0 0 0 1 1 0 0 0 3 3 3 1 1 0 ],) s
5 108 M
(   *  it reads [ 0 1 0 3 1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 ] after smoosh\(\)) s
5 100 M
(   *  completes.) s
5 92 M
(   *) s
5 84 M
(   *  @param ints the input array.) s
5 76 M
(   **/) s
5 60 M
(  public static void smoosh\(int[] ints\) {) s
5 52 M
(    // Fill in your solution here.  \(Ours is fourteen lines long, not counting) s
5 44 M
(    // blank lines or lines already present in this file.\)) s
5 36 M
(  }) s
376 508 M
(Part II  \(3 points\)) s
376 500 M
(-------------------) s
376 492 M
(Fill in the squish\(\) method in the SList class so that it performs as indicated) s
376 484 M
(in the comment.  Your solution should not use arrays, nor should it use your) s
376 476 M
(smoosh\(\) method.  Do not change the prototype of the SList constructor or the) s
376 468 M
(insertEnd method; our test software will call them.) s
376 452 M
(  /**) s
376 444 M
(   *  squish\(\) takes this list and, wherever two or more consecutive items are) s
376 436 M
(   *  equals\(\), it removes duplicate nodes so that only one consecutive copy) s
376 428 M
(   *  remains.  Hence, no two consecutive items in this list are equals\(\) upon) s
376 420 M
(   *  completion of the procedure.) s
376 412 M
(   *) s
376 404 M
(   *  After squish\(\) executes, the list may well be shorter than when squish\(\)) s
376 396 M
(   *  began.  No extra items are added to make up for those removed.) s
376 388 M
(   *) s
376 380 M
(   *  For example, if the input list is [ 0 0 0 0 1 1 0 0 0 3 3 3 1 1 0 ], the) s
376 372 M
(   *  output list is [ 0 1 0 3 1 0 ].) s
376 364 M
(   *) s
376 356 M
(   *  IMPORTANT:  Be sure you use the equals\(\) method, and not the "==") s
376 348 M
(   *  operator, to compare items.) s
376 340 M
(   **/) s
376 324 M
(  public void squish\(\) {) s
376 316 M
(    // Fill in your solution here.  \(Ours is eleven lines long.\)) s
376 308 M
(  }) s
376 292 M
(Part III  \(2 points\)) s
376 284 M
(--------------------) s
376 276 M
(Fill in the twin\(\) method in the SList class so that it performs as indicated) s
376 268 M
(in the comment.  Your solution should not use arrays.) s
376 252 M
(  /**) s
376 244 M
(   *  twin\(\) takes this list and doubles its length by replacing each node) s
376 236 M
(   *  with two consecutive nodes referencing the same item.) s
376 228 M
(   *) s
376 220 M
(   *  For example, if the input list is [ 3 7 4 2 2 ], the) s
376 212 M
(   *  output list is [ 3 3 7 7 4 4 2 2 2 2 ].) s
376 204 M
(   *) s
376 196 M
(   *  IMPORTANT:  Do not try to make new copies of the items themselves.) s
376 188 M
(   *  Make new SListNodes, but just copy the references to the items.) s
376 180 M
(   **/) s
376 164 M
(  public void twin\(\) {) s
376 156 M
(    // Fill in your solution here.  \(Ours is seven lines long.\)) s
376 148 M
(  }) s
376 132 M
(Submitting your solution) s
376 124 M
(------------------------) s
376 116 M
(Change \(cd\) to your hw3 directory, which should contain Homework3.java,) s
376 108 M
(SList.java, SListNode.java, TestHelper.java, and any other files needed to run) s
376 100 M
(your methods.  Make sure your homework compiles and runs on the _lab_ machines) s
376 92 M
(just before you submit.) s
376 76 M
(From your hw3 directory, type "submit hw3".  After submitting, if you realize) s
376 68 M
(your solution is flawed, you may fix it and submit again.  You may submit as) s
376 60 M
(often as you like.  Only the last version you submit before the deadline will) s
376 52 M
(be graded.) s
_R
S
%%Trailer
%%Pages: 1
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
